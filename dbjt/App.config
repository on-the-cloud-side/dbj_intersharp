<?xml version="1.0"?>
<configuration>
	<configSections>
            <section name="dbj_config" type="System.Configuration.NameValueSectionHandler"/>
	</configSections>
<appSettings>
<add key="tracer_stylesheet" value="../trace.css"/>
</appSettings>
<!--
*******************************************************************************************
File : DBJ_EPT.EXE.CONFIG 
Host :
$Author: DBJ $
$Revision: 2006 $
$JustDate: 14/03/05 $
CAUTION : This is NOT STANDARD CFG FILE FORMAT, System.Configuration.AppSettingsReader
WILL NOT WORK ON THIS FILE!
*******************************************************************************************
-->
<dbj_config>
	<!-- 
	Following is the tracer output control. Trace level value may be one of:
	1 = ERROR
	2 = WARNING
	3 = INFO
	4 = VERBOSE
	-->
		<add key="trace_level" value="0"/>
		<add key="trace_style_type" value="text/xsl"/>
		<add key="trace_style_file" value="../dbjtraceshow.xsl"/>
		
	<!-- 
	Following is for making XML result files 
	-->
		<!-- add key="trace_level" value="4" / -->
		<add key="xsltype" value="text/xsl"/>
		<add key="xslfile" value="../dbjeptestshow.xsl"/>
	<!--
		Which eitor to use for xml result files
	-->
		<add key="result_file_editor" value="C:\Program Files\Internet Explorer\iexplore.exe"/>
	<!--
		Pop up the result file after every test call
	-->
		<add key="show_every_result" value="true"/>
	</dbj_config>
	<!--
		From here onwards are named dbj_config nodes 
		where each element name must be: "endpoints"
		Each IP you want to test has one node in here.
		
		NOTE: if this section is in a different file which is
		inluded in here then one can imagine a tool for run-time
		management of this information.
	-->
	<dbj_config name="endpoints">
			<endpoint>
			<!-- if true, mesure the call time. -->
				<measure>true</measure>
			<!-- how many times in a row to execute the call -->	
				<count>1</count>
				<wait>1</wait>
			<!-- currently only objects exposed to COM+ and with an PROGID may be tested -->
			<!--
				For this to work each COM+ object you build has to iherit from the 
				dbj.integration.Ipoint 
				an interface defined in dbjipoint.dll assembly 
				For non .NET code dbjipoint.tlb, type library is available
				
				Bellow we use the Co-Class available form the same assembly.
				Since it is in the same dll as a required interface 
				finding and instantiating this class will always work.
				Of course AFTER dbjipoint.dll is properly registered for COM interop!
			-->
				<progid>DBJIP.PROCINFO</progid>
			<!-- Not surprisingly request is an XML string -->
				<request><![CDATA[
<ROOT>
<REQUEST>A request for the ProcInfo Integration Point</REQUEST>
</ROOT>
				]]></request>
				<reply>Resereved for future use</reply>
				<description>Sample code for IP implementation.</description>
			</endpoint>
<!--
****************************************************************************************
-->
		</dbj_config>
<startup><supportedRuntime version="v2.0.50727"/></startup></configuration>
